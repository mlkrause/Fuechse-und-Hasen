#BlueJ class context
comment0.target=Feld
comment0.text=\n\ Ein\ rechteckiges\ Gitter\ von\ Feldpositionen.\n\ Jede\ Position\ kann\ ein\ einzelnes\ Tier\ aufnehmen.\n\ \n\ @author\ David\ J.\ Barnes\ und\ Michael\ K\u00F6lling\n\ @version\ 2006.03.30\n
comment1.params=tiefe\ breite
comment1.target=Feld(int,\ int)
comment1.text=\n\ Erzeuge\ ein\ Feld\ mit\ den\ angegebenen\ Dimensionen.\n\ @param\ tiefe\ die\ Tiefe\ des\ Feldes.\n\ @param\ breite\ die\ Breite\ des\ Feldes.\n
comment10.params=
comment10.target=int\ gibBreite()
comment10.text=\n\ Liefere\ die\ Breite\ dieses\ Feldes.\n\ @return\ die\ Breite\ dieses\ Feldes.\n
comment11.params=position
comment11.target=java.lang.Object\ gibObjektAn(Position)
comment2.params=
comment2.target=void\ raeumen()
comment2.text=\n\ R\u00E4ume\ das\ Feld.\n
comment3.params=tier
comment3.target=void\ platziere(Tier)
comment3.text=\n\ Platziere\ das\ gegebene\ Tier\ im\ Feld.\n\ Wenn\ an\ der\ Position\ bereits\ ein\ Tier\ eingetragen\ ist,\n\ geht\ es\ verloren.\n\ @param\ tier\ das\ Tier\ das\ platziert\ werden\ soll.\n
comment4.params=position
comment4.target=Tier\ gibTierAn(Position)
comment4.text=\n\ Liefere\ das\ Tier\ an\ der\ angegebenen\ Position,\ falls\ vorhanden.\n\ @param\ position\ die\ gew\u00FCnschte\ Position.\n\ @return\ das\ Tier\ an\ der\ angegebenen\ Position\ oder\ null,\ wenn\n\ \ \ \ \ \ \ \ \ dort\ kein\ Tier\ eingetragen\ ist.\n
comment5.params=zeile\ spalte
comment5.target=Tier\ gibTierAn(int,\ int)
comment5.text=\n\ Liefere\ das\ Tier\ an\ der\ angegebenen\ Position,\ falls\ vorhanden.\n\ @param\ zeile\ die\ gew\u00FCnschte\ Zeile.\n\ @param\ spalte\ die\ gew\u00FCnschte\ Spalte.\n\ @return\ das\ Tier\ an\ der\ angegebenen\ Position\ oder\ null,\ wenn\n\ \ \ \ \ \ \ \ \ dort\ kein\ Tier\ eingetragen\ ist.\n
comment6.params=position
comment6.target=Position\ zufaelligeNachbarposition(Position)
comment6.text=\n\ W\u00E4hle\ zuf\u00E4llig\ eine\ der\ Positionen,\ die\ an\ die\ gegebene\ Position\n\ angrenzen,\ oder\ die\ gegebene\ Position\ selbst.\n\ Die\ gelieferte\ Position\ liegt\ innerhalb\ der\ g\u00FCltigen\ Grenzen\n\ dieses\ Feldes.\n\ @param\ position\ die\ Position,\ von\ der\ ein\ Nachbar\ zu\ w\u00E4hlen\ ist.\n\ @return\ eine\ g\u00FCltige\ Position\ innerhalb\ dieses\ Feldes.\ Das\ kann\n\ \ \ \ \ \ \ \ \ auch\ die\ gegebene\ Position\ selbst\ sein.\n
comment7.params=position
comment7.target=Position\ freieNachbarposition(Position)
comment7.text=\n\ Versuche,\ eine\ freie\ Nachbarposition\ zur\ gegebenen\ Position\ zu\n\ finden.\ Wenn\ es\ keine\ gibt,\ liefere\ die\ gegebene\ Position,\ wenn\n\ sie\ selbst\ frei\ ist.\ Ansonsten\ liefere\ null.\n\ Die\ gelieferte\ Position\ liegt\ innerhalb\ der\ Feldgrenzen.\n\ @param\ position\ die\ Position,\ f\u00FCr\ die\ eine\ Nachbarposition\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ zu\ liefern\ ist.\n\ @return\ eine\ g\u00FCltige\ Position\ innerhalb\ der\ Feldgrenzen.\ Das\n\ \ \ \ \ \ \ \ \ kann\ die\ gegebene\ Position\ selbst\ sein\ oder\ null,\ wenn\n\ \ \ \ \ \ \ \ \ alle\ Nachbarpositionen\ und\ die\ Position\ selbst\ belegt\ sind.\n
comment8.params=position
comment8.target=java.util.Iterator\ nachbarpositionen(Position)
comment8.text=\n\ Erzeuge\ einen\ Iterator\ \u00FCber\ eine\ gemischte\ Liste\ von\ Nachbarpositionen\n\ zu\ der\ gegebenen\ Position.\ Diese\ Liste\ enth\u00E4lt\ nicht\ die\ gegebene\ \n\ Position\ selbst.\ Alle\ Positionen\ liegen\ innerhalb\ des\ Feldes.\n\ @param\ position\ die\ Position,\ f\u00FCr\ die\ Nachbarpositionen\ zu\ liefern\ sind.\n\ @return\ ein\ Iterator\ \u00FCber\ Nachbarpositionen\ zur\ gegebenen\ Position.\n
comment9.params=
comment9.target=int\ gibTiefe()
comment9.text=\n\ Liefere\ die\ Tiefe\ dieses\ Feldes.\n\ @return\ die\ Tiefe\ dieses\ Feldes.\n
numComments=12
